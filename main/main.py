import pygame as pg
import os.path
from button import Button
import sys
import numpy as np
from pygame import gfxdraw
import sympy as sym
from enum import IntEnum
from numba import jit

pg.init()

FRAME_RATE = 60


class Settings():
    def __init__(self, screen):
        pass

    def redraw(self):
        pass




class MainMenu():
    def __init__(self, screen):
        self.screen = screen
        self.play = Button(self.screen, pos=(2, 2.66), text="PLAY")
        self.settings = Button(self.screen, pos=(2, 1.77), size_minus=1.2, text="SETTINGS")
        self.quit = Button(self.screen, pos=(2, 1.33), text="QUIT")

    def redraw(self):
        self.screen.blit(self.menu_bg, (0,0))
        self.play.update()
        self.quit.update()
        self.settings.update()

    def rescale(self):
        self.x, self.y = self.screen.get_size()
        self.menu_bg = pg.image.load(os.path.dirname(os.path.abspath(__file__))+'/../static/crappy_bg.png')
        self.menu_bg = pg.transform.scale(self.menu_bg, self.screen.get_size())

        self.play.rescale()
        self.settings.rescale()
        self.quit.rescale()

    def events(self, event):
        if self.play.update(event): return [1, "PLAY"]
        if self.quit.update(event): sys.exit()




class Game():
    TRACK_WIDTH = 6
    def __init__(self, screen):
        self.screen = screen
        self.screen.fill((0,0,0))
        self.rotation = 0
        self.zoom = 0.4
        self.player = PlayerCar(self.screen, self, [0, 0.5])
        self.cars = [self.player, AiCar(self.screen, self, [0, -10], 2, 5, 5), AiCar(self.screen, self, [3, 0], 2, 5, 5), AiCar(self.screen, self, [-3, 0], 3, 5, 5), AiCar(self.screen, self, [3, 6], 4, 5, 5), AiCar(self.screen, self, [-3, 6], 5, 5, 5), AiCar(self.screen, self, [0, 7], 6, 5, 5)]
        self.screen_center = self.player.pos
        self.rescale()


    def convert_passer(self, gamev, ofssc = 1):
        npgamev = np.array([*gamev], dtype=np.float64)
        screen_center = np.array([*self.screen_center], dtype=np.float64)

        result = self.convert(npgamev, screen_center, self.rotation_matrix, self.coord_conversion, ofssc)
        if ofssc:
            return (result[0],pg.display.Info().current_h - result[1])
        else: return result


    @staticmethod
    @jit
    def convert(npgamev, screen_center, rot_m, coordc_m, ofssc):
        if ofssc:

            origin_point = np.array([npgamev[0] - screen_center[0], npgamev[1] - screen_center[1]], dtype=np.float64)
            rotated_point = np.dot(origin_point, rot_m)
            new_point = np.array([rotated_point[0] + screen_center[0], rotated_point[1] + screen_center[1]], dtype=np.float64)
            result = np.dot(np.array([ofssc, *new_point], dtype=np.float64), coordc_m)
            return result

        else:
            result = np.dot(np.array([ofssc, *npgamev], dtype=np.float64), coordc_m)
            return result


    def redraw(self):
        for car in self.cars: car.movement_calc()
        self.create_matrix()
        self.screen.fill((78, 217, 65))
        self.background()
        for car in self.cars: car.redraw(self.rotation)
        self.rotation = -self.player.car_angle


    def create_matrix(self):
        s_x, s_y = self.screen.get_size()
        rotate = np.array([[np.cos(np.radians(self.rotation)), (np.sin(np.radians(self.rotation)))], [-np.sin(np.radians(self.rotation)), np.cos(np.radians(self.rotation))]], dtype=np.float64)
        self.rotation_matrix = rotate
        scale = np.array([[0, 0], [(s_x*(0.05208*self.zoom)), 0], [0, (s_y*(0.09259*self.zoom))]], dtype=np.float64)
        scale[0] = -np.matmul((1, *self.screen_center), scale)+(s_x/2, s_y/2)
        self.coord_conversion = scale


    def background(self):
        screen_points = []
        points = [(0, 0), (0, 100), (1.25000000000000, 106.562500000000), (5.00000000000000, 111.250000000000), (11.2500000000000, 114.062500000000), (20, 115), (28.7500000000000, 113.437500000000), (35.0000000000000, 108.750000000000), (38.7500000000000, 100.937500000000), (40, 90), (38.7500000000000, 77.5000000000000),
(35, 70), (29.6875000000000, 65.0000000000000), (28.7500000000000, 60.0000000000000), (32.1875000000000, 55.0000000000000), (40, 50), (56.2500000000000,
44.3750000000000), (75.0000000000000, 42.5000000000000), (96.2500000000000, 44.3750000000000), (120, 50), (136.250000000000, 57.5000000000000), (145.000000000000, 65.0000000000000), (146.250000000000, 72.5000000000000), (140, 80), (131.875000000000, 86.2500000000000), (122.500000000000, 90.0000000000000), (111.875000000000, 91.2500000000000), (100, 90), (83.1250000000000, 89.0625000000000), (72.5000000000000, 91.2500000000000), (68.1250000000000, 96.5625000000000), (70, 105), (73.3750000000000, 107.937500000000), (79.5000000000000, 109.750000000000), (100, 110), (124.375000000000, 106.562500000000), (147.500000000000, 101.250000000000), (169.375000000000, 94.0625000000000), (190, 85), (199.375000000000, 80.3125000000000), (202.500000000000, 76.2500000000000), (199.375000000000, 72.8125000000000), (190, 70), (182.500000000000, 67.1875000000000), (180.000000000000, 63.7500000000000), (182.500000000000, 59.6875000000000), (190, 55), (200.000000000000, 53.7500000000000), (210, 60), (216.250000000000, 63.7500000000000), (225.000000000000, 65.0000000000000), (250, 60), (253.750000000000, 57.9375000000000), (255.000000000000, 54.7500000000000), (250, 45), (243.437500000000, 40.6250000000000), (233.750000000000,
37.5000000000000), (205, 35), (194.375000000000, 33.4375000000000), (187.500000000000, 28.7500000000000), (184.375000000000, 20.9375000000000), (185, 10), (185.625000000000, 3.12500000000000), (182.500000000000, -2.50000000000000), (175.625000000000, -6.87500000000000), (165, -10), (155.000000000000, -9.68750000000000), (150.000000000000, -3.75000000000000), (150.000000000000, 7.81250000000000), (155, 25), (159.062500000000, 38.7500000000000), (158.515625000000, 42.8125000000000), (156.250000000000, 45.0000000000000), (146.562500000000, 43.7500000000000), (130, 35), (124.875000000000, 29.8125000000000), (121.500000000000, 22.2500000000000), (120, 0), (117.500000000000, -23.7500000000000), (114.375000000000, -30.9375000000000), (110.000000000000, -35.0000000000000), (104.375000000000, -35.9375000000000), (97.5000000000000, -33.7500000000000), (80, -20), (68.1250000000000, -14.3750000000000), (62.6562500000000, -14.8437500000000), (57.5000000000000, -17.5000000000000), (48.1250000000000, -29.3750000000000), (40, -50), (28.7500000000000, -73.7500000000000),
(22.1875000000000, -80.9375000000000), (15.0000000000000, -85.0000000000000), (7.18750000000000, -85.9375000000000), (-1.25000000000000, -83.7500000000000), (-10.3125000000000, -78.4375000000000), (-20, -70), (-28.1250000000000, -60.6250000000000), (-32.5000000000000, -52.5000000000000), (-33.1250000000000, -45.6250000000000), (-30, -40), (-12.2500000000000, -23.7500000000000), (-5, -15)]

        ppp_points = []
        pp_points = [(6.0, 0.0), (6.00000000000000, 99.7338580115409), (6.23299202816949, 102.355018328448), (6.76621058384895, 104.087978634406), (7.53915224714245, 105.363332378840), (8.64589889497095, 106.430552360675), (10.3169773051089, 107.405348099922), (12.7388220169142, 108.230976978946), (15.9763810457497, 108.791323733937), (20.0290023588832, 108.993954799594), (21.9152909447379, 108.917894775971), (23.6236191137452, 108.696990271358), (25.1242876247048, 108.349613301228), (26.4327031428022, 107.891667869894), (27.5737997706440, 107.333522780189), (28.5795215570150, 106.675014467684), (29.4826645937587, 105.902589502048), (30.3092140503852, 104.990954071945), (31.0729018498220, 103.909063022743), (31.7744227334452, 102.627438331508), (32.4046860814946, 101.123400796391), (32.9155908167811, 99.4913440031141), (33.7166989516677, 95.1520082724786), (33.9927317875577, 89.9763925995408), (33.7053298388123, 83.6535497271417), (33.3764249389239, 81.1538724879901), (32.9267779655216, 78.9698729028930), (32.3937863155517, 77.1932340696602), (31.8179413694471, 75.8321460152310), (31.2526104490588, 74.8754321499585), (30.8019420302380, 74.3346300473736), (27.7577740294709, 71.9586940467748), (25.9970050512465, 70.1113298729001), (24.5714729081855, 68.1701797206468), (23.4516292164689, 65.9983616518632), (22.7394991674285, 63.5996078024637), (22.5413813989745, 61.0637003662529), (22.8945272683743, 58.5524408505210), (23.7350511411966, 56.2135918131024), (24.9510816202538, 54.1101877412196), (26.4508299463047, 52.2281506261754), (28.2730811521910, 50.4339340542258), (32.2738055530380, 47.4566507791769), (37.2750388190034, 44.6489408754770), (41.5023572837865, 42.7078252538929), (45.8473669120545, 41.0464980430846), (50.3447405525252, 39.6463722870890), (54.9902982848446, 38.5060990255197), (59.7806100741471, 37.6236731695955), (64.7130589480411, 36.9966669568124), (69.7858235160653, 36.6224466198270), (74.9978028016398, 36.4983518749324), (80.3485077307968, 36.6218296809899),
(85.8379401637555, 36.9905229040990), (91.4664746874684, 37.6023201349374), (97.2856075737626, 38.4628961251640), (109.189773928802, 40.8759028187531), (121.935058015167, 44.3073254573899), (131.531615523726, 48.2783147712760), (135.674326189125, 50.3073975461656), (139.348080616288, 52.3578651334194), (142.615754566464, 54.4774374254254), (145.487669365688, 56.7008553345016), (147.965954254437, 59.0800088277010), (150.027631247499, 61.6842323978844), (151.596340962692, 64.5803118720876), (152.526907087188, 67.7708242989287), (152.666434284954, 71.1194770453339), (151.986021956769, 74.3854562206257), (150.611173869431, 77.3851247748173), (148.701837879209, 80.0806579374838), (146.357886570893, 82.5265201722480), (143.895481916975, 84.5643722996282), (139.756064854555, 88.2070593145579), (134.857575197436, 91.4727190859709), (129.579590088256, 94.0207118972989), (123.964050991923, 95.8321761219225), (118.054229614673, 96.9066890996043), (111.884252109312, 97.2592592427678), (105.474146493767, 96.9127670473330), (99.2647197946698, 95.9574706320873), (90.4716559375725, 95.1377782386291), (83.3290098854569, 95.0648940952401), (80.5849505474357, 95.2797903084587), (78.2612399094726, 95.6458543130693), (76.4660178841871, 96.1160315101679), (75.2205809597099, 96.6212559229275), (74.5061151921388, 97.0615662215469), (74.2114535628356, 97.3428341404272), (74.1251488748512, 97.4797959278807), (74.0661405678621, 97.6681686001922), (74.0340296100593, 98.1658884461349), (74.1629442022159, 99.1143315170012), (74.5857866290457, 100.519660759112), (75.1515047746807, 101.808240979725), (75.3760256601778, 102.077143900727), (76.1254114044739, 102.567126887383), (77.8390057333953, 103.226959186450), (80.5131020005293, 103.828017521723), (84.0742701449576, 104.249377111331), (88.4595513902227, 104.435679909333), (93.6259624462972, 104.361874037103), (99.4664895563063, 104.020929561138), (111.504494091022, 102.573321420887), (123.286611163267, 100.660640077990), (134.748941732682, 98.2917584269780), (145.892718421595, 95.4676506359522), (156.719431168640, 92.1891390294527), (167.230809956859, 88.4568378655197), (177.428790247502, 84.2710996865245), (187.510552858030, 79.5404264615846), (192.740769055393, 77.2241878598949), (195.999778591350, 75.3339623290404), (196.684196929663, 74.7962050632227), (196.890150683351, 74.5778940843130), (196.625890735584, 75.0271359955171), (196.371121618304, 76.2755046701904), (196.675131488197, 77.7043510586875), (197.182781216611, 78.4658256513081), (197.241448476301, 78.5162794946413), (196.775116760143, 78.2431423466062), (193.688169237523, 77.0701022880105), (188.419302699026, 75.7905204143757), (183.454405026401, 74.2833193351858), (179.413266963964, 72.3637787555284), (177.401608869280, 70.8909576504919), (175.699035145020, 69.0606908969116), (174.404501919205, 66.6334410985091), (173.917202742908, 63.7705584377671), (174.369911477281,
60.9977174397366), (175.461030636973, 58.6790892253903), (176.884880039679, 56.7924887668056), (178.615429341099, 55.0928421314818), (182.399214869888, 52.3495976231095), (187.408650264637, 49.5765173153023), (190.716846629977, 48.2325625418828), (194.258942478846, 47.4577290749428), (197.872648294239, 47.3448007682117), (201.449579149974, 47.9036962144203), (204.897493232610, 49.0889166803263), (208.172779126489, 50.8289123114499), (211.277524772902, 53.0604482448093), (213.999599472524, 55.5273284413416), (215.020975292795, 56.4285424004045), (215.909255787409, 57.0363132651403), (216.945812035535, 57.5792712998727), (218.027255180129, 58.0024447042792), (221.192270258071, 58.7328327991889), (225.023483051896, 58.9882469854439), (229.666902232035, 58.7151046807298), (235.085519164043, 57.8595335862022), (241.242660106131, 56.3935476476099), (247.991079840799, 54.3396807718414), (249.207357104514, 53.8444821716145), (249.290599940727, 53.7820500444544), (248.995324213481, 54.2397274216867), (248.916785202831, 54.6756189307939), (248.866246993586, 54.3496474811649), (248.373658102582, 53.1428046982055), (247.224695486346, 51.2470163814163), (245.667618165979, 49.2116938840788), (243.741771123637, 47.6501962821801), (240.893179337209, 46.0743795492626), (237.120559012222, 44.6182804764606), (232.432728250674, 43.3588632569401), (226.854205466929, 42.3445863871683), (220.409348844892, 41.6037982696928), (213.117984982025, 41.1527860719897), (204.846576457528, 40.9981803051767), (201.579141364993, 40.8920947502242), (198.335474921924, 40.5494539287732), (195.256611598557, 39.9573648281257), (192.343092600162, 39.0931854641950), (189.606307166582, 37.9313425914491), (187.073319149105, 36.4492751344141), (184.787660751594, 34.6374727461436), (182.801631884405, 32.5095846741558), (181.160603539857, 30.1046293416282), (179.888088857116, 27.4766098881404), (178.981618376805, 24.6772157577675), (178.420256590078, 21.7428245998767), (178.176136759625, 18.6913267192243), (178.223029471634, 15.5260686586333), (178.540133499325, 12.2417769432612), (179.134160479534, 8.70046225355627), (179.632446506634, 6.89896661711845), (179.792026698448, 5.87309395545437), (179.811830831277, 5.02151624382135), (179.725001120535, 4.30951261573802), (179.547738004726, 3.68103429605282), (179.268283269161, 3.07280928335225), (178.848934897943, 2.43467045758598), (178.240794621317, 1.74264876349388), (177.400186690826, 0.998110310773173), (176.400321154583, 0.290888346113937), (173.226220453737, -1.35964401832609), (169.064471891754, -2.83639350806211), (163.839840478404, -4.10724979779595), (161.470390228099, -4.46578503303942), (159.589007518850, -4.53495351499709), (158.221131959827, -4.38676699610288), (157.344263257980, -4.12539267151385), (156.835925708578, -3.84234108150630), (156.489346653913, -3.51983001674838), (156.143049034241, -2.99419970117401), (155.783168781995, -2.06750805164126), (155.497456856658, -0.627043761401527), (155.383791520706, 1.34789145076083), (155.510432849512, 3.83322752857843), (155.916603038368, 6.79488515564942), (156.622864455712, 10.2025964943352), (157.624308488336, 13.9758945458309), (160.632756548756, 22.9260275255795), (162.293945229723, 27.0692275298737), (163.654430588712, 31.1290886011429), (164.592443397808, 34.8811398375259), (165.072988921837, 38.4220015935327), (164.983237631895, 41.8923848046391), (164.036024135292, 45.3781304721391), (161.844807886190, 48.5484007899882), (158.578071375682, 50.6315371155295), (155.019110023692, 51.4137264236593), (151.545100983655, 51.2907526523306), (148.071236716654, 50.5702474710266), (144.443285917653, 49.3686331936507), (140.555401683049, 47.7179113957182), (136.293866502259, 45.5977446391059), (126.559181025449, 39.9399787209601), (122.935828645902, 36.9476596209969), (119.872126165297, 33.1690932282508), (117.481490773035, 28.7993252571501), (115.724207723913, 23.9200606207587), (114.541851113462, 18.5636268855341), (113.883983949141, 12.7293838756334), (113.715264578668, 6.40240748288377), (113.997127382937, -0.0647779706138341), (113.848624753697, -6.82164760099890), (113.406022191328, -12.7967821929877), (112.688260468736, -17.8928904233879), (111.728419240758, -22.0750557738671), (110.589065125537, -25.3032257669915), (109.380441771135, -27.5556602001961), (108.117646389652, -29.0613008473488), (107.767246118647, -29.3452458945426), (107.311690616383, -29.6171096620227), (106.856625767729, -29.8032725546536), (106.547935070625, -29.8782402953788), (104.932485394979, -29.9207521289485), (102.882162069900, -29.4813971307172), (100.162347491124, -28.3579954568750), (96.8635274544781, -26.4446798356204), (93.0728635432020, -23.7069781219210), (88.8513966135042, -20.1405664054522), (83.8410635499880, -15.3726688127513), (80.1429089097871, -12.7043800217202), (76.4634580822699, -10.6496217673925), (72.6740302345720, -9.18437633294931), (68.7768501129602, -8.38358589700167), (64.8331844062859, -8.32804130958372), (60.9631261706434, -9.05718271629896), (57.2951412718132, -10.5353258844843), (53.9049765481224, -12.6737374794277), (50.8008285542883, -15.3837079502353), (47.9502640733831, -18.6081169532264), (45.3104335856464, -22.3217767919068), (42.8437074042823, -26.5195388900177), (40.5217209743937, -31.2057296848838), (38.3244532090047, -36.3879649806124), (36.2381273678658, -42.0742256064618), (34.3206159675581, -48.0615571217081), (31.8426688274658, -54.8946840837810), (29.2660434403509, -60.8577314082468), (26.5987278516038, -65.9760937542209),
(23.8700166744305, -70.2440779031331), (21.1192411627391, -73.6657742713346), (18.3916087647546, -76.2665400461570), (15.7214977699257, -78.1059498425947), (13.1002496133077, -79.2771458274666), (10.4486514294067, -79.8724025626280), (7.63486531394141, -79.9275748394019), (4.53873903808018, -79.4018175472745), (1.10111174509053, -78.2142735733326), (-2.67873461979198, -76.2911938438310), (-6.77184991107216, -73.5855752614593), (-11.1430382748934, -70.0742928052751), (-15.7538830048174, -65.7562001216954), (-19.9823829240498, -61.2360795183780), (-23.2213643273402, -57.1521464446641), (-25.4677918104942, -53.5842910302429), (-26.8330266377196, -50.4814846047306), (-27.1324465066336, -49.3989666171185), (-27.2920266984481, -48.3730939554543), (-27.3118308312767, -47.5215162438214), (-27.2250011205348, -46.8095126157379), (-27.0477380047263, -46.1810342960530), (-26.7682832691610, -45.5728092833522), (-26.3489348979433, -44.9346704575860), (-25.7365068683830, -44.2377695963623), (-15.7507316164049, -35.3547179918418), (-7.98172104778200, -27.9709476167044),
(-2.71530825760930, -22.3045541082907), (-0.794801838644954, -19.7775719780745), (0.345389557213584, -17.7338326836110), (2.71274668277047, -12.6609245574177), (4.45885240877670, -8.12104966980151), (5.59915043628283, -3.93995690227907), (5.963302408041713, -0.6625891564490792)]
        pp_screen = []

        for point in points:
            screen_points.append(self.convert_passer(point))
        for point in pp_points:
            pp_screen.append(self.convert_passer(point))
        #c=0
        pg.draw.lines(self.screen, (255,255,255), True, screen_points, 5)
        pg.draw.lines(self.screen, (255,0,0), True, pp_screen, 5)

        print(len(screen_points))
        #for i, point in enumerate(screen_points):
         #   if i == 306: break
          #  if i % 2 != 0: continue
           # else:
            #    c +=1

             #   pg.draw.line(self.screen, (255,255,255), point, screen_points[i+1], 3)



    def rescale(self):
        self.create_matrix()
        self.background()


    def events(self, event):
        if event.type in (pg.KEYDOWN, pg.KEYUP):
            if event.key == pg.K_LEFT and self.zoom > 0.08:
                self.zoom -= 0.01
            if event.key == pg.K_RIGHT and self.zoom < 0.8:
                self.zoom += 0.01
            self.player.control(event)






class Mainloop():
    def __init__(self):

        self.SCREEN_WIDTH = pg.display.Info().current_w
        self.SCREEN_HEIGHT = pg.display.Info().current_h
        self.clock = pg.time.Clock()

        icon = pg.image.load(os.path.dirname(os.path.abspath(__file__))+'/../static/game_icon.png')
        pg.display.set_icon(icon)

        self.running = True
        self.menu_bg = pg.image.load(os.path.dirname(os.path.abspath(__file__))+'/../static/crappy_bg.png')
        self.fullscreen = True
        self.screen = pg.display.set_mode((0, 0), pg.FULLSCREEN)
        self.scene = MainMenu(self.screen)

        self.main_loop()

    def change_scene(self, event):
        if event == "PLAY": self.scene = Game(self.screen)

    def main_loop(self):
        self.scene.rescale()
        while self.running:

            self.scene.redraw()


            pg.display.flip()
            t = self.clock.tick(FRAME_RATE)
            for event in pg.event.get():


                r = self.scene.events(event)
                if r:
                    if r[0] == 1: self.change_scene(r[1])
                if event.type == pg.KEYDOWN:
                    if event.key == pg.K_ESCAPE: sys.exit()
                    if event.key == pg.K_F11:
                        if self.fullscreen:
                            self.screen = pg.display.set_mode((self.SCREEN_WIDTH / 2, self.SCREEN_HEIGHT / 2), pg.RESIZABLE)
                            self.fullscreen = False
                        else:
                            self.screen = pg.display.set_mode((0, 0), pg.FULLSCREEN)
                            self.fullscreen = True
                elif event.type == pg.QUIT:
                    self.running = False
                elif event.type == pg.WINDOWRESIZED:
                    self.scene.rescale()



class Hud():
    def __init__(self):
        pass


    def speedometer(self):
        pass



class Car():
    class KeyState(IntEnum):
        left = 1
        center = 0
        right = -1
    class SpeedState(IntEnum):
        accel = 1
        const = 0
        deccel = -1



    #color id refers to how the car image files are named 1 through 6
    def __init__(self, screen, game, start_pos, color_id=1):
        self.screen = screen
        self.pos = start_pos
        self.color_id = color_id
        self.turning_angle = 0
        self.tire_direct = 0
        self.car_angle = 0
        self.prev_car_angle = 0
        self.speed = 0
        self.radius = 0
        self.game = game
        self.time_1_frame = round(1/FRAME_RATE, 4) #distance traveled in 1 tick
        self.clock = pg.time.Clock()
        self.turn_timer = 0
        self.keystate = self.KeyState.center
        self.speedstate = self.SpeedState.const
        self.a = 0

    def redraw(self):
        self.car_rect = self.car.get_rect(center=self.game.convert_passer(self.pos))
        self.screen.blit(self.car, self.car_rect)

    def movement_calc(self):
        chg = 0.08*abs(self.turning_angle) + 0.01
        if self.speed > 0.116: chg *= 0.116/self.speed
        time_elapsed = self.clock.tick()
        if self.keystate == self.KeyState.center:
            if abs(self.turning_angle) > chg:
                self.turning_angle += chg if (self.turning_angle < 0) else -chg
            else:
                self.turning_angle = 0
        else:
            self.turning_angle += chg*self.keystate
            maxTurn = 0.5
            if self.speed > 0.116: maxTurn *= 0.116/self.speed
            if abs(self.turning_angle) > maxTurn:
                self.turning_angle = self.keystate * maxTurn

        if self.speedstate != self.SpeedState.const:
            if self.speedstate == self.SpeedState.deccel:
                self.speed -= time_elapsed*self.max_deccel
                if self.speed < 0: self.speed = 0
            elif self.speedstate == self.SpeedState.accel:
                self.speed += time_elapsed*self.max_accel


        self.car_angle += self.turning_angle*self.speed*time_elapsed

        self.pos[0] += self.speed*np.cos(np.radians(self.car_angle+90))
        self.pos[1] += self.speed*np.sin(np.radians(self.car_angle+90))

        if self.car_angle >= 360: self.car_angle -= 360
        if self.car_angle <= -360: self.car_angle += 360

    def transform(self):
        self.car = pg.image.load(os.path.dirname(os.path.abspath(__file__))+f'/../static/car_{self.color_id}.png')
        self.car = pg.transform.scale(self.car, self.game.convert_passer([2, 4], 0))




class PlayerCar(Car):
    def __init__(self, screen, game, start_pos, color_id=1):
        Car.__init__(self, screen, game, start_pos, color_id)
        self.max_accel = 8/FRAME_RATE/1000 # 8 meters persecond persecond
        self.max_deccel = 20/FRAME_RATE/1000


    def redraw(self, rotation):
        self.transform()
        super().redraw()

    def control(self, event):
        if (event.type == pg.KEYUP):
            if (event.key in (pg.K_d, pg.K_a)):
                self.keystate = self.KeyState.center
            if (event.key in (pg.K_UP, pg.K_DOWN)):
                self.speedstate = self.SpeedState.const
        elif (event.type == pg.KEYDOWN):
            if (event.key == pg.K_d):
                self.keystate = self.KeyState.right
            elif (event.key == pg.K_a):
                self.keystate = self.KeyState.left
            if (event.key == pg.K_UP):
                self.speedstate = self.SpeedState.accel
            elif (event.key == pg.K_DOWN):
                self.speedstate = self.SpeedState.deccel





class AiCar(Car):
    def __init__(self, screen, game, start_pos, color_id, max_accel, max_deccel):
        Car.__init__(self, screen, game, start_pos, color_id)
        self.max_accel = max_accel/FRAME_RATE/1000 # 8 meters persecond persecond
        self.max_deccel = max_deccel/FRAME_RATE/1000


    def redraw(self, rotation):
        self.transform(rotation)
        super().redraw()
        self.tick_radar()

    def transform(self, rotation):
        super().transform()
        self.car = pg.transform.rotate(self.car, rotation - self.car_angle)



    def render_radar(self):
        pass

    def tick_radar(self):
        for i, degree in enumerate([-80, -40, 0, 40, 80]):
            length = 4
            x =  self.pos[0] + (np.sin(np.radians(degree + self.car_angle)) * length)
            y =  self.pos[1] - (np.cos(np.radians(degree + self.car_angle)) * length)


            color = ['red', 'green', 'blue', 'yellow', 'orange']
            pg.draw.line(self.screen, color[i], self.game.convert_passer(self.pos), self.game.convert_passer((x, y)), 2)


    def check_collision(self):
        pass

    def gasbrake(self, choice):
        pass

    def steer(self, choice):
        pass









if __name__ == "__main__":
    #cProfile.run("Mainloop()", sort="cumtime")
    Mainloop()